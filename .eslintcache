[{"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/index.js":"1","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/reportWebVitals.js":"2","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/App.js":"3","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/context.js":"4","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Header.js":"5","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/SidebarNav.js":"6","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Dashboard/index.js":"7","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Error/index.js":"8","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Planning/index.js":"9","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Settings/index.js":"10","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/CustomInput.js":"11","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Planning/DndTower.js":"12","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/MOCK.js":"13","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Dashboard/WidgetCreatorModal.js":"14","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Planning/TaskCreator.js":"15","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/reducer.js":"16","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/index.js":"17","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GraphCard/index.js":"18","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/ListCard/index.js":"19","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DeadlineCard/index.js":"20","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/CardSettingsMenu/index.js":"21","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DragDropTaskCard/index.js":"22","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DragDropTaskCard/dragDropSettings.js":"23","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/addItem.js":"24","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/AddItem.js":"25","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/Generaltem.js":"26","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DeadlineCard/DeadlineItem.js":"27","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DeadlineCard/AddDeadline.js":"28","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/ListCard/ListCardItem.js":"29","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/ListCard/TrackableItem.js":"30"},{"size":580,"mtime":1610335458705,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1610166674702,"results":"33","hashOfConfig":"32"},{"size":1029,"mtime":1610943385974,"results":"34","hashOfConfig":"32"},{"size":5534,"mtime":1610806441899,"results":"35","hashOfConfig":"32"},{"size":512,"mtime":1610509805614,"results":"36","hashOfConfig":"32"},{"size":1035,"mtime":1610794764023,"results":"37","hashOfConfig":"32"},{"size":2506,"mtime":1610696725083,"results":"38","hashOfConfig":"32"},{"size":210,"mtime":1610411808163,"results":"39","hashOfConfig":"32"},{"size":1438,"mtime":1610775977402,"results":"40","hashOfConfig":"32"},{"size":133,"mtime":1610411745488,"results":"41","hashOfConfig":"32"},{"size":455,"mtime":1610425571425,"results":"42","hashOfConfig":"32"},{"size":7030,"mtime":1610799606853,"results":"43","hashOfConfig":"32"},{"size":4319,"mtime":1610797069687,"results":"44","hashOfConfig":"32"},{"size":3526,"mtime":1610673408665,"results":"45","hashOfConfig":"32"},{"size":3726,"mtime":1610773400255,"results":"46","hashOfConfig":"32"},{"size":2383,"mtime":1610799098131,"results":"47","hashOfConfig":"32"},{"size":2020,"mtime":1610791745170,"results":"48","hashOfConfig":"32"},{"size":1501,"mtime":1610776814158,"results":"49","hashOfConfig":"32"},{"size":2463,"mtime":1610799868797,"results":"50","hashOfConfig":"32"},{"size":2033,"mtime":1610791969467,"results":"51","hashOfConfig":"32"},{"size":2334,"mtime":1610778895025,"results":"52","hashOfConfig":"32"},{"size":1519,"mtime":1610776809592,"results":"53","hashOfConfig":"32"},{"size":1598,"mtime":1610751908131,"results":"54","hashOfConfig":"32"},{"size":2439,"mtime":1610782082325,"results":"55","hashOfConfig":"32"},{"size":2439,"mtime":1610782082325,"results":"56","hashOfConfig":"32"},{"size":1687,"mtime":1610790157245,"results":"57","hashOfConfig":"32"},{"size":1746,"mtime":1610792840825,"results":"58","hashOfConfig":"32"},{"size":2530,"mtime":1610793678591,"results":"59","hashOfConfig":"32"},{"size":1207,"mtime":1610696624495,"results":"60","hashOfConfig":"32"},{"size":1232,"mtime":1610799881023,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"57m3o7",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/index.js",[],["131","132"],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/reportWebVitals.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/App.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/context.js",["133","134"],"//  Import general\nimport React, { useContext, useEffect, useReducer } from \"react\";\nimport { currentUserData, trackableData } from \"./MOCK\";\nimport reducer from \"./reducer\";\n// Create global context\nconst AppContext = React.createContext();\n\nexport const AppProvider = ({ children }) => {\n  // Trial\n\n  const initalState = {\n    pageWidgets: [],\n    dashboardWidgetData: [],\n    columns: [],\n\n    projects: [],\n    currentProject: [],\n    taskData: [],\n\n    currentUserData: currentUserData,\n    trackableData: { trackableData, hardTrackables: { logs: [] } },\n\n    isModalOpen: false,\n    isUserLoggedIn: true,\n    isLoading: true,\n  };\n\n  const [state, dispatch] = useReducer(reducer, initalState);\n\n  const url = \"http://localhost:5000\";\n\n  // =================================================================\n  //            DASHBOARD EVENTS\n  // =================================================================\n\n  // Load Dashboard functionality\n  const loadDashboard = async () => {\n    dispatch({ type: \"LOADING\" });\n    const response = await fetch(`${url}/Dashboard`);\n    const dashboardWidgets = await response.json();\n    console.log(dashboardWidgets);\n\n    dashboardWidgets.dashboard.forEach(async (item) => {\n      const response = await fetch(`${url}/Dashboard/Data/${item.data_id}`);\n      const dashboardWidgetData = await response.json();\n      dispatch({\n        type: \"SET_DASHBOARD_WIDGET_DATA\",\n        payload: {\n          id: item.data_id,\n          widgetData: dashboardWidgetData.card_data,\n        },\n      });\n    });\n\n    dispatch({ type: \"UPDATE_DASHBOARD\", payload: dashboardWidgets });\n  };\n\n  const loadProjects = async () => {\n    dispatch({ type: \"LOADING\" });\n\n    // Load all projects\n    let response = await fetch(`${url}/Projects`);\n    const projects = await response.json();\n\n    dispatch({ type: \"LOAD_PROJECTS\", payload: projects });\n\n    const currentProject = projects[0];\n    response = await fetch(`${url}/Projects/Data/${currentProject.data}`);\n    const taskData = await response.json();\n\n    dispatch({\n      type: \"SET_CURRENT_PROJECT\",\n      payload: { currentProject, taskData },\n    });\n  };\n\n  useEffect(() => {\n    loadDashboard();\n    loadProjects();\n  }, []);\n\n  // Create New Widget\n  const newWidgetCreation = async (type, title) => {\n    try {\n      // Post request to API to create a widget\n      const response = await fetch(`${url}/Dashboard`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          type: type,\n          title: title,\n        }),\n      });\n      const dashboardWidgets = await response.json();\n      // Add the widget to the dashboard\n      dispatch({\n        type: \"CREATE_NEW_DASHBOARD_WIDGET\",\n        payload: dashboardWidgets,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Change current project\n  const changeCurrentProject = async (currentProject) => {\n    const response = await fetch(`${url}/Projects/Data/${currentProject.data}`);\n    const taskData = await response.json();\n\n    dispatch({\n      type: \"SET_CURRENT_PROJECT\",\n      payload: { currentProject, taskData },\n    });\n  };\n\n  // Delete dashboard widget\n  const deleteWidget = async (id) => {\n    try {\n      const response = await fetch(`${url}/Dashboard/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const dashboardWidgets = await response.json();\n\n      dispatch({\n        type: \"DELETE_DASHBOARD_WIDGET\",\n        payload: dashboardWidgets,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const saveWidget = async (widgets) => {\n    dispatch({ type: \"NEW_WIDGET_SETTINGS\", payload: widgets });\n  };\n\n  // Handle drag and drop from project kanban\n  const updateProjectColumnData = async (newColumns, currentProject) => {\n    dispatch({\n      type: \"UPDATE_PROJECT_COLUMNS\",\n      payload: newColumns,\n    });\n\n    const sendSave = await fetch(\n      `${url}/Projects/Data/${currentProject.data}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newColumns),\n      }\n    );\n\n    // NOTE: ADD CHECK FOR IF SAVE WENT THROUGH LATER\n  };\n\n  const addToWatchCount = (user) => {\n    const id = \"a\";\n    dispatch({\n      type: \"UPDATE_USER_COMMITS\",\n      payload: { userData: user, trackableData: trackableData[id] },\n    });\n  };\n\n  const createNotification = (data) => {\n    dispatch({ type: \"CREATE_NOTIFICATION\", payload: data });\n  };\n\n  const addProjectTaskCard = async (projectTaskCard, location) => {\n    console.log(projectTaskCard, location);\n    const addNewcard = await fetch(`${url}/Projects/Data/${location}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(projectTaskCard),\n    });\n  };\n\n  // Handle Modal Toggleing\n  const toggleModal = () => {\n    dispatch({ type: \"TOGGLE_MODAL\" });\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        ...state,\n        loadDashboard,\n        newWidgetCreation,\n        deleteWidget,\n        saveWidget,\n        changeCurrentProject,\n        updateProjectColumnData,\n        addProjectTaskCard,\n        toggleModal,\n        addToWatchCount,\n        createNotification,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Create hook to use context\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Header.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/SidebarNav.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Dashboard/index.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Error/index.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Planning/index.js",["135"],"import React, { useState, useEffect } from \"react\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@material-ui/core\";\nimport { useGlobalContext } from \"../../context\";\nimport DndTower from \"./DndTower\";\nimport TaskCreatorModal from \"./TaskCreator\";\n\nfunction Index() {\n  const {\n    isModalOpen,\n    toggleModal,\n    projects,\n    changeCurrentProject,\n  } = useGlobalContext();\n  const [project, setProject] = useState(1);\n\n  const handleProjectChange = (e) => {\n    setProject(e.target.value);\n    changeCurrentProject(projects[project]);\n  };\n\n  return (\n    <div>\n      <div className=\"title\">\n        <FormControl style={{ width: \"25%\" }}>\n          <InputLabel id=\"type-select-label\">Project Select</InputLabel>\n          <Select\n            labelId=\"type-select-label\"\n            value={project}\n            onChange={handleProjectChange}\n          >\n            {projects.map((item, index) => {\n              return (\n                <MenuItem key={item.id} value={index}>\n                  {item.name}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n\n        <IconButton onClick={toggleModal}>\n          <i className=\"fas fa-plus\"></i>\n        </IconButton>\n      </div>\n      <section className=\"planning-body\">\n        <DndTower />\n      </section>\n      {isModalOpen && <TaskCreatorModal />}\n    </div>\n  );\n}\n\nexport default Index;\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Settings/index.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/CustomInput.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Planning/DndTower.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/MOCK.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Dashboard/WidgetCreatorModal.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Planning/TaskCreator.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/reducer.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/index.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GraphCard/index.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/ListCard/index.js",["136","137"],"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, IconButton } from \"@material-ui/core\";\nimport CardSettings from \"../CardSettingsMenu/\";\nimport { CustomInput } from \"../CustomInput\";\nimport ListItem from \"./ListCardItem\";\nimport TrackableItem from \"./TrackableItem\";\nimport { useGlobalContext } from \"../../../context\";\n\nfunction ListCard({ cardTitle, dataId, cardId, cardSettings }) {\n  const [modalIsShowing, setModalIsShowing] = useState(false);\n  const [input, setInput] = useState(cardTitle);\n  const { dashboardWidgetData, trackableData } = useGlobalContext();\n\n  const toggleModal = () => {\n    setModalIsShowing(!modalIsShowing);\n  };\n\n  const handleCardNameChange = (e) => {\n    console.log(e.target.value);\n    setInput(e.target.value);\n  };\n\n  return (\n    <>\n      <Card className=\"card\">\n        <CardSettings\n          cardId={cardId}\n          modalIsShowing={modalIsShowing}\n          CardSettings={cardSettings}\n        />\n        <CardHeader\n          className=\"card-header\"\n          style={{\n            backgroundColor: cardSettings.cardHeaderColor,\n            color: cardSettings.textColor,\n          }}\n          avatar={\n            <CustomInput\n              value={input}\n              style={{ color: cardSettings.cardTextColor }}\n              onChange={handleCardNameChange}\n            />\n          }\n          action={\n            <>\n              <IconButton aria-label=\"settings\" onClick={toggleModal}>\n                <i className=\"fas fa-ellipsis-v\"></i>\n              </IconButton>\n            </>\n          }\n        />\n\n        <CardContent className=\"card-body\">\n          {/* <AddItem /> */}\n          {/* {typeof dashboardWidgetData[dataId] !== \"undefined\" ? (\n            dashboardWidgetData[dataId].map((item) => {\n              return <ListItem key={item.id} {...item} />;\n            })\n          ) : (\n            <h1>Loading</h1>\n          )} */}\n\n          {typeof trackableData.hardTrackables.logs !== \"undefined\" ? (\n            trackableData.hardTrackables.logs.map((item) => {\n              return (\n                <TrackableItem\n                  key={item.id}\n                  notification={item.notification}\n                  project={item.project}\n                  user={item.user}\n                />\n              );\n            })\n          ) : (\n            <h1>Loading</h1>\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n\nexport default ListCard;\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DeadlineCard/index.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/CardSettingsMenu/index.js",["138"],"import React, { useState, useEffect } from \"react\";\nimport { CardContent, Collapse, Button } from \"@material-ui/core\";\nimport { CirclePicker } from \"react-color\";\nimport { useGlobalContext } from \"../../../context\";\n\nfunction CardSettings({ cardId, modalIsShowing, cardSettings }) {\n  const [settings, setSettings] = useState({ ...cardSettings });\n  const { deleteWidget, saveWidget, pageWidgets } = useGlobalContext();\n\n  // Header color change\n  const handleChangeColor = (color) => {\n    setSettings({\n      ...settings,\n      cardHeaderColor: color.hex,\n    });\n    const widgets = pageWidgets.dashboard.map((item) => {\n      if (item.id === cardId) {\n        return {\n          ...item,\n          cardSettings: settings,\n        };\n      }\n      return { ...item };\n    });\n    saveWidget(widgets);\n  };\n\n  // Text color change\n  const handleTextChangeColor = (color) => {\n    setSettings({\n      ...settings,\n      cardTextColor: color.hex,\n    });\n    const widgets = pageWidgets.dashboard.map((item) => {\n      if (item.id === cardId) {\n        return {\n          ...item,\n          cardSettings: settings,\n        };\n      }\n      return { ...item };\n    });\n    saveWidget(widgets);\n  };\n\n  // Settings reset\n  const handleReset = () => {\n    setSettings({\n      ...cardSettings,\n      cardHeaderColor: \"#eaeaea\",\n      cardTextColor: \"#222\",\n    });\n    const widgets = pageWidgets.dashboard.map((item) => {\n      if (item.id === cardId) {\n        return {\n          ...item,\n          cardSettings: settings,\n        };\n      }\n      return { ...item };\n    });\n    saveWidget(widgets);\n  };\n\n  const handleDeleteWidget = () => {\n    deleteWidget(cardId);\n  };\n\n  return (\n    <>\n      <Collapse in={modalIsShowing} unmountOnExit disableStrictModeCompat>\n        <CardContent className=\"card-settings\">\n          <h4>Background Color:</h4>\n          <div className=\"picker\">\n            <CirclePicker onChangeComplete={handleChangeColor} />\n          </div>\n          <h4>Text Color:</h4>\n          <div className=\"picker\">\n            <CirclePicker onChangeComplete={handleTextChangeColor} />\n          </div>\n          <Button onClick={handleReset}>Reset</Button>\n          <Button onClick={handleDeleteWidget}>DELETE WIDGET</Button>\n        </CardContent>\n      </Collapse>\n    </>\n  );\n}\n\nexport default CardSettings;\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DragDropTaskCard/index.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DragDropTaskCard/dragDropSettings.js",["139","140","141","142"],"import React, { useState } from \"react\";\nimport { CardContent, Collapse, Button } from \"@material-ui/core\";\nimport { CirclePicker } from \"react-color\";\nimport { useGlobalContext } from \"../../../context\";\n\nfunction CardSettings({ cardId, modalIsShowing, cardSettings }) {\n  const [settings, setSettings] = useState(cardSettings);\n  const { deleteWidget, updateCardSettings } = useGlobalContext();\n\n  // Header color change\n  const handleChangeColor = (color) => {\n    setSettings({\n      ...settings,\n      cardHeaderColor: color.hex,\n    });\n  };\n\n  // Text color change\n  const handleTextChangeColor = (color) => {\n    setSettings({\n      ...settings,\n      cardTextColor: color.hex,\n    });\n  };\n\n  // Settings reset\n  const handleReset = () => {\n    setSettings({\n      ...cardSettings,\n      cardHeaderColor: \"#eaeaea\",\n      cardTextColor: \"#222\",\n    });\n  };\n\n  const handleDeleteWidget = () => {\n    deleteWidget(cardId);\n  };\n\n  return (\n    <>\n      <Collapse in={modalIsShowing} unmountOnExit disableStrictModeCompat>\n        <CardContent className=\"card-settings\">\n          <h4>Background Color:</h4>\n          <div className=\"picker\">\n            <CirclePicker onChangeComplete={handleChangeColor} />\n          </div>\n          <h4>Text Color:</h4>\n          <div className=\"picker\">\n            <CirclePicker onChangeComplete={handleTextChangeColor} />\n          </div>\n          {/* <Button onClick={handleReset}>Reset</Button>\n          <Button onClick={handleDeleteWidget}>DELETE</Button> */}\n        </CardContent>\n      </Collapse>\n    </>\n  );\n}\n\nexport default CardSettings;\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/addItem.js",["143"],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/AddItem.js",["144"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Modal,\n  makeStyles,\n  Paper,\n  FormControl,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"none\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  formControl: {\n    margin: \"1rem 0rem\",\n  },\n}));\n\nfunction ListCardItem() {\n  const classes = useStyles();\n\n  const [toggle, setToggle] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  const toggleModal = () => {\n    setToggle(!toggle);\n  };\n  const handleCardNameChange = (e) => {\n    setName(e.target.value);\n  };\n  const handleContentChange = (e) => {\n    setContent(e.target.value);\n  };\n  const handleAddGeneralItem = () => {\n    console.log(\"add\");\n  };\n\n  return (\n    <>\n      <div className=\"general-add-card\" onClick={toggleModal}>\n        <i className=\"fas fa-plus\"></i>\n      </div>\n      {toggle && (\n        <Modal className={classes.modal} open={toggle} onClose={toggleModal}>\n          <div className=\"modal-container\">\n            <Paper className={classes.paper}>\n              <h3 className=\"title\">General Item</h3>\n              <div className=\"modal-form\">\n                {/* Name Select */}\n                <FormControl className={classes.formControl}>\n                  <TextField\n                    id=\"standard-name\"\n                    label=\"Card Name\"\n                    value={name}\n                    autoFocus\n                    onChange={handleCardNameChange}\n                  />\n                </FormControl>\n\n                {/* Text Select */}\n                <FormControl className={classes.formControl}>\n                  <TextField\n                    id=\"standard-name\"\n                    label=\"Content\"\n                    value={content}\n                    onChange={handleContentChange}\n                    multiline\n                    rows={7}\n                  />\n                </FormControl>\n\n                {/* Add Content */}\n                <Button onClick={handleAddGeneralItem}>Add to widget</Button>\n              </div>\n            </Paper>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport default ListCardItem;\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/GeneralCard/Generaltem.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DeadlineCard/DeadlineItem.js",["145","146","147","148"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  IconButton,\n  Collapse,\n  Avatar,\n  Button,\n} from \"@material-ui/core\";\n\nDeadlineItem.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  userName: PropTypes.string,\n  time: PropTypes.string,\n};\n\nDeadlineItem.defaultProps = {\n  title: \"Title\",\n  description: \"Description\",\n  userName: \"A\",\n  time: \"Time\",\n  content: \"No content\",\n};\n\nfunction DeadlineItem({ title, userName, description, time, content }) {\n  const [toggle, setToggle] = useState(false);\n  const toggleUi = () => {\n    setToggle(!toggle);\n  };\n\n  const deleteItem = () => {\n    console.log(\"test\");\n  };\n\n  return (\n    <div className=\"general-card-item\">\n      <Card>\n        <CardHeader\n          avatar={<Avatar>{userName[0]}</Avatar>}\n          title={<strong>{title}</strong>}\n          subheader={<strong>{time}</strong>}\n          action={\n            <>\n              <IconButton onClick={deleteItem}>\n                <i className=\"fas fa-trash\"></i>\n              </IconButton>\n            </>\n          }\n        />\n\n        {/* <Collapse in={toggle}>\n          <CardContent>\n            <ul>\n              <li>\n                <strong>Time: </strong>\n                {time}\n              </li>\n              <li>\n                <strong>Description: </strong>\n                {content}\n              </li>\n            </ul>\n            <Button\n              onClick={deleteItem}\n              style={{ backgroundColor: \"#ff4040\", color: \"#fefefe\" }}\n            >\n              Delete\n            </Button>\n          </CardContent>\n        </Collapse> */}\n      </Card>\n    </div>\n  );\n}\n\nexport default DeadlineItem;\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/DeadlineCard/AddDeadline.js",["149","150","151"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Modal,\n  makeStyles,\n  Paper,\n  FormControl,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"none\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  formControl: {\n    margin: \"1rem 0rem\",\n  },\n}));\n\nfunction ListCardItem() {\n  const classes = useStyles();\n\n  const [toggle, setToggle] = useState(false);\n  const [deadlineName, setDeadlineName] = useState(\"\");\n  const [deadline, setDeadline] = useState(\"\");\n\n  const toggleModal = () => {\n    setToggle(!toggle);\n  };\n  const handleDeadlineEntry = (e) => {\n    setDeadlineName(e.target.value);\n  };\n  const handleDeadlineChange = (e) => {\n    setDeadline(e.target.value);\n  };\n  const handleAddDeadlineItem = () => {\n    console.log(\"add\");\n  };\n\n  return (\n    <>\n      <div className=\"general-add-card\" onClick={toggleModal}>\n        <i className=\"fas fa-plus\"></i>\n      </div>\n      {toggle && (\n        <Modal className={classes.modal} open={toggle} onClose={toggleModal}>\n          <div className=\"modal-container\">\n            <Paper className={classes.paper}>\n              <h3 className=\"title\">Deadline Item</h3>\n              <div className=\"modal-form\">\n                {/* Name Select */}\n                <FormControl className={classes.formControl}>\n                  <TextField\n                    id=\"standard-name\"\n                    label=\"Deadline Name\"\n                    value={deadlineName}\n                    autoFocus\n                    onChange={handleDeadlineEntry}\n                  />\n                </FormControl>\n\n                {/* Text Select */}\n                <FormControl className={classes.formControl}>\n                  <TextField\n                    id=\"Deadline-time\"\n                    label=\"Deadline Time\"\n                    type=\"datetime-local\"\n                    className={classes.textField}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </FormControl>\n\n                {/* Add Content */}\n                <Button onClick={handleAddDeadlineItem}>Add to widget</Button>\n              </div>\n            </Paper>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport default ListCardItem;\n","/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/ListCard/ListCardItem.js",[],"/Users/zacanderson/Desktop/Software/Github Projects/cmdb/src/components/Cards/ListCard/TrackableItem.js",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":150,"column":11,"nodeType":"158","messageId":"159","endLine":150,"endColumn":19},{"ruleId":"156","severity":1,"message":"160","line":178,"column":11,"nodeType":"158","messageId":"159","endLine":178,"endColumn":21},{"ruleId":"156","severity":1,"message":"161","line":1,"column":27,"nodeType":"158","messageId":"159","endLine":1,"endColumn":36},{"ruleId":"156","severity":1,"message":"162","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":16},{"ruleId":"156","severity":1,"message":"163","line":12,"column":11,"nodeType":"158","messageId":"159","endLine":12,"endColumn":30},{"ruleId":"156","severity":1,"message":"161","line":1,"column":27,"nodeType":"158","messageId":"159","endLine":1,"endColumn":36},{"ruleId":"156","severity":1,"message":"164","line":2,"column":33,"nodeType":"158","messageId":"159","endLine":2,"endColumn":39},{"ruleId":"156","severity":1,"message":"165","line":8,"column":25,"nodeType":"158","messageId":"159","endLine":8,"endColumn":43},{"ruleId":"156","severity":1,"message":"166","line":27,"column":9,"nodeType":"158","messageId":"159","endLine":27,"endColumn":20},{"ruleId":"156","severity":1,"message":"167","line":35,"column":9,"nodeType":"158","messageId":"159","endLine":35,"endColumn":27},{"ruleId":"156","severity":1,"message":"168","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":17},{"ruleId":"156","severity":1,"message":"168","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":17},{"ruleId":"156","severity":1,"message":"169","line":6,"column":3,"nodeType":"158","messageId":"159","endLine":6,"endColumn":14},{"ruleId":"156","severity":1,"message":"170","line":9,"column":3,"nodeType":"158","messageId":"159","endLine":9,"endColumn":11},{"ruleId":"156","severity":1,"message":"164","line":11,"column":3,"nodeType":"158","messageId":"159","endLine":11,"endColumn":9},{"ruleId":"156","severity":1,"message":"171","line":31,"column":9,"nodeType":"158","messageId":"159","endLine":31,"endColumn":17},{"ruleId":"156","severity":1,"message":"168","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":17},{"ruleId":"156","severity":1,"message":"172","line":35,"column":10,"nodeType":"158","messageId":"159","endLine":35,"endColumn":18},{"ruleId":"156","severity":1,"message":"173","line":43,"column":9,"nodeType":"158","messageId":"159","endLine":43,"endColumn":29},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'sendSave' is assigned a value but never used.","Identifier","unusedVar","'addNewcard' is assigned a value but never used.","'useEffect' is defined but never used.","'ListItem' is defined but never used.","'dashboardWidgetData' is assigned a value but never used.","'Button' is defined but never used.","'updateCardSettings' is assigned a value but never used.","'handleReset' is assigned a value but never used.","'handleDeleteWidget' is assigned a value but never used.","'PropTypes' is defined but never used.","'CardContent' is defined but never used.","'Collapse' is defined but never used.","'toggleUi' is assigned a value but never used.","'deadline' is assigned a value but never used.","'handleDeadlineChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]